---
title: "Tutorial(simple) - Code"
subtitle: "Simple demo of using code in TriplotGUI"
title-block-banner: true
title-block-banner-color: white
title-block-categories: false

page-layout: full
format:
  html: 
    margin-top: 0em
    margin-bottom: 0em
    padding-top: 0em
    padding-bottom: 0em
    minimal: true
    smooth-scroll: true
    fig-responsive: true
    toc-location: right
    toc-depth: 5
    toc-title: Tutorial
    number-sections: true  ## add number in the session or not
    number-depth: 4
    code-fold: show
    code-summary: "Show the code"
    code-overflow: wrap
    code-tools: true
    code-copy: true
    highlight: tango
    df-print: paged  ## kable is another option How the dataframe looks like 
    standalone: false  ### specifies if all assets and libraries must be integrated into the output html file as a standalone document.
    fig-align: right
    theme:  solar
geometry: margin=lin  
---

```{r, include=FALSE}
##This is a function that combines html and rmarkdown. It aims to generate a button that could hide output or plot (fold.output=T or fold.plot=T).
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
  force(type)
  function(x, options) {
    res = hooks[[type]](x, options)
    
    if (!isTRUE(options[[paste0("fold.", type)]])) return(res)
    
    paste0(
      "<details><summary>", type, "</summary>\n\n",
      res,
      "\n\n</details>"
    )
  }
}
knitr::knit_hooks$set(
  output = hook_foldable("output"),
  plot = hook_foldable("plot")
)
```

Before starting,please make sure you have installed the TriplotGUI package following [Setup](installation.qmd){target="_blank"}.

The code of at this page can be downloaded [here](https://gitlab.com/YingxiaoYan/triplotgui/-/blob/main/Tutorial_code/CAMP_2_applying_TriplotGUI_code.R){target="_blank"}

# Data description
The data used in this page of tutorial can be downloaded [here](https://gitlab.com/YingxiaoYan/triplotgui/-/blob/main/data/CAMP_2.rda){target="_blank"} in rda format.

The Data used for this example of code is ***CAMP_2***. This is a synthetic dataset that was simulated from the authentic data used in a cross-sectional study of carbonhydrate alternatives and metabolic phenotypes in Chinese young adults (Liu et al. 2018). The simulated data ***CAMP_2*** is a list that contains three data frames:

-   Clinical measurements (ClinData, 11 variables): `"AGE"`, `"SEX"`, `"BMI"`, `"triglycerides"`, `"total_cholesterol"` `"HDL"`(high-density lipoprotein cholesterol), `"LDL"`(low-density lipoprotein cholesterol),, `"GGT"`(gamma-glutamyltransferase), `"ALT"`(alanine aminotransferase), `"AST"`(aspartate aminotransferase), `"creatinine"`, `"Urea_nitrogen"`, `"Uric_acid"`, `"Fasting_glucose"`.
-   Plasma metabolites predictive of BMI (MetaboliteData, 20 variables)
-   Dietary intake as measured by food frequency questionnaires (FoodData, 11 variables): `"Refined_grains"`, `"Coarse_grains"`, `"Red_meat"`, `"Poutry"`, `"Seafood"`, `"Egg"`, `"Animal_organs"`, `"Vegetables"`, `"Fruits"`, `"Potatos"`, `"Legumes"`.

The data frames are row-wise matched by observation and consist of 300 synthetic observations.

**Reference**

Liu X, Liao X, Gan W, et al. Inverse Relationship between Coarse Food Grain Intake and Blood Pressure among Young Chinese Adults. Am J Hypertens. 2019;32(4):402–408. [10.1093/ajh/hpy187](https://academic.oup.com/ajh/article/32/4/402/5236579?login=true){target="_blank"}

Schillemans T, Shi L, Liu X, Åkesson A, Landberg R, Brunius C. Visualization and Interpretation of Multivariate Associations with Disease Risk Markers and Disease Risk-The Triplot. Metabolites. 2019 Jul 6;9(7):133. [doi: 10.3390/metabo9070133](https://www.mdpi.com/2218-1989/9/7/133){target="_blank"}

# Research question

We want to assess the relationship between diet, metabolic profiles and risk factors of metabolic diseases (i.e. BMI, total cholesterol, triglyceride, HDL, LDL)

# Data exploration

***CAMP_2*** is loaded in the R enviroment up on running `library(TriplotGUI)`. We will do some data exploration first to see how the data looks like.

```{r noshowcode_runcode_noshowoutput_1}
#| eval: true
#| echo: false
#| output: false
#| classes: styled-output
library(TriplotGUI)

```

##  Check CAMP_2
Check ***CAMP_2*** as a list:
```{r showcode_runcode_showoutput_1}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
class(CAMP_2)
names(CAMP_2)
```

##  Check datasets
Check the names of variables in each data:
```{r showcode_runcode_showoutput_2}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
colnames(CAMP_2$ClinData)
colnames(CAMP_2$MetaboliteData)
colnames(CAMP_2$FoodData)
```

## Check variables' class
We Transform the data to dataframe format and then use TriplotGUI's `checkdata()` function in to examine the class of variables.
```{r showcode_runcode_noshowoutput_1}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
ClinData<-as.data.frame(CAMP_2$ClinData)
MetaboliteData<-as.data.frame(CAMP_2$MetaboliteData)
FoodData<-as.data.frame(CAMP_2$FoodData)

ClinData_check<-checkdata(ClinData)
MetaboliteData_check<-checkdata(MetaboliteData)
FoodData_check<-checkdata(FoodData)
```

```{r showcode_runcode_showoutput_3}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
ClinData_check$class_sumamry_statistics
MetaboliteData_check$class_sumamry_statistics$check_class_table
FoodData_check$class_sumamry_statistics
```

## Check sanities for variables
Whether each variable contians missing (NA) or abnormal values (e.g. NAN, Inf, blank value) can also be checked
```{r showcode_runcode_showoutput_4}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
ClinData_check$everycolumn
MetaboliteData_check$everycolumn
FoodData_check$everycolumn
```

::: callout-note
You shall only continue when the class of varaibles are correct and the missing or abnormal values in the variable are properly handled.
:::

## Build data for analysis
We see food data as our exposures and BMI, triglycerides, total_cholesterol, HDL and LDL as outcomes. We want to explore their relationships through the metabolomics data, using metabolites as assumed mediators. Sex and age are used as potential confounders for exposure.-mediator and mediator-outcome association.
```{r showcode_runcode_showoutput_5}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
exposure1<-FoodData
Omics1<-MetaboliteData
outcome1<-ClinData[,c("BMI","triglycerides","total_cholesterol","HDL","LDL")]
covariates1<-ClinData[,c("SEX" ,"AGE")]

```
# Code example of using TriplotGUI 
We will use the most simple settings in this example. Please go to  [Tutorial(complex)](complex_code.qmd){target="_blank"}.if you want to try more advanced settings.

## Step 1 {#simple_link}
Using `TriplotGUI` package, first we perform dimension reduction, i.e. principal component analysis (PCA) on metabolomics data.

```{r showcode_runcode_noshowoutput_2}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
reduced_Omics1<-PCAorWGCNA_plots(dataframe=Omics1,
                                 pc_num = 5,
                                 option="PCA")

```


You can see scree plot, score plot, loadings plot and biplot at this stage.
```{r showcode_runcode_showoutput_6}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
reduced_Omics1$scree_plot
reduced_Omics1$score_plot
reduced_Omics1$loading_plot
reduced_Omics1$scoreloading_plot
```

We then build a TPObject, which is used for saving information and pass them through steps in TriplotGUI.

```{r showcode_runcode_showoutput_7}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.output: false
scores=reduced_Omics1$object$scores
loadings<-reduced_Omics1$object$loadings
variance<- reduced_Omics1$object$variance
TPObject1<-makeTPO(scores=scores,
                   loadings=loadings,
                   variance=variance)
```

## Step 2
The correlations between principal component (PC) scores and food items were calculated using Pearson correlations, adjusting for confounders. The associations between PC scores and risk markers were investigated using linear regression.

Correlation matrix of correlation coefficients and p values between the TPO scores saved in the TPObject and the dietarry variables in the data is generated, using a pair-wise Pearson correlations, adjusting for confounders
```{r showcode_runcode_noshowoutput_3}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.output: false
Correlations_object<-makeCorr(TPObject=TPObject1,
                              corrData=exposure1,
                              confounder=covariates1,
                              method="pearson")

```

The result of correlations are then added into the TPObject.
```{r showcode_runcode_showoutput_8}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.output: false

TPObject2<-addCorr(TPObject=TPObject1,
                   Corr=Correlations_object$cor_estimate,
                   Corr_p=Correlations_object$cor_pvalue)
```

Matrices of risk estimates and p values between the TPO scores saved in the TPObject and the outcome variables are generated, using linear regression, adjusting for confounders.

```{r showcode_runcode_noshowoutput_4}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.output: false
Risks_object<-coefficient_get(TPObject=TPObject2,
                              outcome=outcome1,
                              confounder=covariates1)

```

The result of risk estimates are then added into the TPObject.
```{r showcode_runcode_showoutput_9}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.output: false


TPObject3<-addRisk(TPObject=TPObject2,
                   Risk=Risks_object)

```

## Step 3

Generate Triplot: Note that Triplot can be generated from any TPObject.
```{r showcode_runcode_noshowoutput_5}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.output: false

Triplot_object3<-TriplotGUI(TPObject3,
                            riskOR=F) #risks is shown as coeffcients, not odds ratio

```

Plotting the triplot
```{r showcode_runcode_showoutput_10}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true

Triplot_object3$triplot

```

In the triplot, PC1 reflected metabolites that were positively associated with BMI and also correlated with a high intake of meat and refined grains, adjusting for age and sex. This implies that the metabolite features that contributes most to PC1, are likely to provide useful information for a potential mechanism of how red meat and refrained grains intake may affect BMI.


## Step 4
Mediation analysis is then performed using the "product" method on the our exposures (i.e. Refined grains, Red meat), mediator (i.e. PC1) and outcome (i.e. BMI) of interest, adjusting for age and sex for both exposure-mediator and mediator-outcome relationship.
```{r showcode_runcode_noshowoutput_6}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.output: false

mediation_object3<-
  get_mediation_traditional (mediator=TPObject3$scores[,c(1:2),drop=F], 
                             # Specfiying at least 2 components so that there can be a 2-dimensional plot
                             exposure=exposure1[,c("Refined_grains","Red_meat"),drop=F],
                             outcome=outcome1[,"BMI",drop=F],
                             confounder_ME=covariates1,
                             confounder_OE=covariates1)

```

Look at the barplot to have a more direct view on direct, indirect and total effects
```{r showcode_runcode_noshowoutput_7}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.plot: true
mediation_plot_object3<-plot_mediation(mediation_object3,
                                       by_row="one_by_one")

```

```{r showcode_runcode_showoutput_11}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
mediation_plot_object3
```
:::callout-note
The barplot showed direct, indirect and total effect for each exposure-mediator-outcome combination. It is a convenient tool to check the direction and magnitude of mediation estimates. Red color represents significant positive effect (p<0.05); Blue color represents significant negative effect (p<0.05). Grey represents insignificant effect. One star for p<0.05; Two stars for p<0.01; Three stars for p<0.001; 
:::


Add the mediation result into the TPObject.
```{r showcode_runcode_showoutput_12}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true

TPObject4<-add_mediation(TPObject3, mediation_object3)

```

Make the triplot with mediation
```{r showcode_runcode_noshowoutput_8}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.plot: true

Triplot_object4<-mediation_triplot(TPObject4,
                                   which_show = "IE")

```


Only showing the mediaiton estimates
```{r showcode_runcode_showoutput_13}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
Triplot_object4$mediation_plot

```

Plotting the triplot with mediation
```{r showcode_runcode_showoutput_14}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
Triplot_object4$final_plot

```

Base on the barplot and the triplot with mediaiton, we observed a significant mediation effect through PC1 for Red_meat-BMI and refined_grain-BMI association. This further implies that the metabolite features that contributes to PC1 are likely to mediate the pathway from red meat and refined grain intake to BMI change.

## Step 5 
Users can check the heatmaps of correlations, risk estimations and mediation results from the TPObject through the `checkTPO_ggplot()` function in TriplotGUI
```{r showcode_runcode_noshowoutput_9}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.plot: true

checkTPObject4<-checkTPO_ggplot(TPObject4)

```

```{r showcode_runcode_showoutput_15}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
checkTPObject4$corr_coefficients
checkTPObject4$risk_coefficients
checkTPObject4$med_coefficients
```
:::callout-note
-  One star for p<0.05; Two stars for p<0.01; Three stars for p<0.001.
-  Note that in the plot of `checkTPbject4$med_coefficients`, only the slected exposures, mediators and outcomes that we use to do mediation on will show up. The rows in the heatmaps are mediators and the column represents exposure-outcome pairs. For each exposure_outcome pair, 5 result are shown: *IE* (indirect effect), *DE* (direct effect), *TE* (total effect), *IE/(IE+DE)* and *IE/(abs(IE)+abs(DE))×(IE+DE)/(abs(IE+DE))*. Please see [here](https://yingxiaoyan.gitlab.io/triplotgui_tutorial/workflow.html#other-visualization-settings){target="_blank"} for more information. The "T" before the names of exposures-outcome pairs means that this mediation is using the "Traditional" product method.
:::




## Step 6 
We can save all your output, including data, results and visualization output through the `save()` function as an rda file. 

```{r showcode_noruncode_noshowoutput_1}
#| eval: false
#| echo: true
#| warning: false
#| error: true
#| classes: styled-output

save(exposure1,Omics1,outcome1,covariates1,
     reduced_Omics1,Correlations_object,Risks_objects,
     mediation_object3,mediation_plot_object3,
     TPObject1,TPObject2,TPObject3,TPObject4,
     checkTPObject4,
     "Tutorial_simple_output.rda")
```

FOR REFERENCE: `r fontawesome::fa("graduation-cap", fill = "#98A08D", a11y = "sem")` \# stopped working 5/1/2023?
