---
title: "Tutorial(simple) - Code"
filters:
   - lightbox
lightbox: auto
subtitle: "Simple demo of using TriplotGUI's code"
title-block-banner: true
title-block-banner-color: white
title-block-categories: false

page-layout: full
format:
  html: 
    margin-top: 0em
    margin-bottom: 0em
    padding-top: 0em
    padding-bottom: 0em
    minimal: true
    smooth-scroll: true
    fig-responsive: true
    toc-location: right
    toc-depth: 5
    toc-title: Tutorial
    number-sections: true  ## add number in the session or not
    number-depth: 4
    code-fold: show
    code-summary: "Show the code"
    code-overflow: wrap
    code-tools: true
    code-copy: true
    highlight: tango
    df-print: paged  ## kable is another option How the dataframe looks like 
    standalone: false  ### specifies if all assets and libraries must be integrated into the output html file as a standalone document.
    fig-align: right
    theme:  solar
geometry: margin=lin  
---

```{r, include=FALSE}
##This is a function that combines html and rmarkdown. It aims to generate a button that could hide output or plot (fold.output=T or fold.plot=T).
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
  force(type)
  function(x, options) {
    res = hooks[[type]](x, options)
    
    if (!isTRUE(options[[paste0("fold.", type)]])) return(res)
    
    paste0(
      "<details><summary>", type, "</summary>\n\n",
      res,
      "\n\n</details>"
    )
  }
}
knitr::knit_hooks$set(
  output = hook_foldable("output"),
  plot = hook_foldable("plot")
)
```

The code at this page can be downloaded [here](https://gitlab.com/YingxiaoYan/triplotgui/-/blob/main/Tutorial_code/CAMP_2_applying_TriplotGUI_code.R){target="_blank"}

Before starting, please ensure you have installed the TriplotGUI package following the [Setup](installation.qmd){target="_blank" style="color:blue"} instructions.

# Data description

The data used in this tutorial can be downloaded [here](https://gitlab.com/YingxiaoYan/triplotgui/-/blob/main/data/CAMP_2.rda){target="_blank"} in rda format.

This example utilizes ***CAMP_2***, which is a modified version of the **CAMP** data provided by the [*Triplot*](https://gitlab.com/CarlBrunius/triplot/-/blob/master/vignettes/Triplot_Tutorial.md?ref_type=heads){target="_blank"} package (Schillemans et al. 2019). The **CAMP** dataset was simulated from authentic data collected in a cross-sectional study of carbohydrate alternatives and metabolic phenotypes among young adults in China (Liu et al. 2018). The simulated ***CAMP_2*** data consists of three data frames:

-   Clinical measurements (ClinData): Contains 14 variables, including `"AGE"`, `"SEX"`, `"BMI"`, `"triglycerides"`, `"total_cholesterol"` `"HDL"`(high-density lipoprotein cholesterol), `"LDL"`(low-density lipoprotein cholesterol),, `"GGT"`(gamma-glutamyltransferase), `"ALT"`(alanine aminotransferase), `"AST"`(aspartate aminotransferase), `"creatinine"`, `"Urea_nitrogen"`, `"Uric_acid"`, `"Fasting_glucose"`.
-   Plasma metabolites predictive of BMI (MetaboliteData): Comprises 20 variables
-   Dietary intake as measured by food frequency questionnaires (FoodData): Includes 11 variables: `"Refined_grains"`, `"Coarse_grains"`, `"Red_meat"`, `"Poutry"`, `"Seafood"`, `"Egg"`, `"Animal_organs"`, `"Vegetables"`, `"Fruits"`, `"Potatos"`, `"Legumes"`.

The data frames are row-wise matched by observations and consist of 300 synthetic observations.

**Reference**

Liu X, Liao X, Gan W, et al. Inverse Relationship between Coarse Food Grain Intake and Blood Pressure among Young Chinese Adults. *Am J Hypertens*. 2019;32(4):402–408. [10.1093/ajh/hpy187](https://academic.oup.com/ajh/article/32/4/402/5236579?login=true){target="_blank"}

Schillemans T, Shi L, Liu X, Åkesson A, Landberg R, Brunius C. Visualization and Interpretation of Multivariate Associations with Disease Risk Markers and Disease Risk-The Triplot. *Metabolites*. 2019 Jul 6;9(7):133. [doi: 10.3390/metabo9070133](https://www.mdpi.com/2218-1989/9/7/133){target="_blank"}

# Research question

We aim to assess the relationship between diet, metabolic profiles, and risk factors for metabolic diseases, including BMI, total cholesterol, triglycerides, HDL, and LDL. In this context, we assume that metabolites act as mediators, facilitating the effect of dietary exposures on these risk factors.

# Data exploration

***CAMP_2*** is loaded in the R environment upon running `library(TriplotGUI)`. Let's begin with some data exploration to understand the structure and contents of the dataset:

```{r noshowcode_runcode_noshowoutput_1}
#| eval: true
#| echo: false
#| output: false
#| classes: styled-output
library(TriplotGUI)

```

## Check CAMP_2

Check the ***CAMP_2*** list:

```{r showcode_runcode_showoutput_1}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
class(CAMP_2)
names(CAMP_2)
```

## Check datasets

Check the names of variables in each data:

```{r showcode_runcode_showoutput_2}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
colnames(CAMP_2$ClinData)
colnames(CAMP_2$MetaboliteData)
colnames(CAMP_2$FoodData)
```

## Check variables' class

We then transform the data to dataframe format and use TriplotGUI's `checkdata()` function to examine the classes of variables.

```{r showcode_runcode_noshowoutput_1}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
ClinData<-as.data.frame(CAMP_2$ClinData)
MetaboliteData<-as.data.frame(CAMP_2$MetaboliteData)
FoodData<-as.data.frame(CAMP_2$FoodData)

ClinData_check<-checkdata(ClinData)
MetaboliteData_check<-checkdata(MetaboliteData)
FoodData_check<-checkdata(FoodData)
```

```{r showcode_runcode_showoutput_3}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
ClinData_check$class_summary_statistics
MetaboliteData_check$class_summary_statistics
FoodData_check$class_summary_statistics
```

## Check sanities for variables

To check for missing (NA) or abnormal values (e.g., NaN, negative values, infinite values, blank values) in each variable, you can use the `checkdata()` function. This function generates a summary table for each data frame, showing the number of observations containing NA, NaN, zero, negative, infinite (Inf), and blank values, along with their percentages.

```{r showcode_runcode_noshowoutput_1_1}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output


if (!require(kableExtra)) {
  install.packages("kableExtra")  # Install the package if it's not available.

}
library(kableExtra)             # Load it after installation.'

```

```{r showcode_runcode_showoutput_4}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
kable(ClinData_check$everycolumn)
kable(MetaboliteData_check$everycolumn)
kable(FoodData_check$everycolumn)
```

::: callout-note
You shall only continue to use the data when the class of variables are correct and the missing or abnormal values in the variable are properly handled.
:::

## Build data for analysis

We treat food variables as our exposures and BMI, triglycerides, total_cholesterol, HDL and LDL as outcomes. We want to explore their relationships through the metabolomics data, using metabolites as assumed mediators. Sex and age are used as potential confounders for exposure-mediator and mediator-outcome association.

```{r showcode_runcode_showoutput_5}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
exposure1 <- FoodData
Omics1 <- MetaboliteData
outcome1 <- ClinData[, c("BMI", "triglycerides", "total_cholesterol", "HDL", "LDL")]
covariates1 <- ClinData[, c("SEX" , "AGE")]

```

# Code example of using TriplotGUI

We will use the most simple settings in this example. Please go to [Tutorial(complex)](complex_code.qmd){target="_blank"}, if you want to try more advanced settings.

## Step 1: PCA/WGCNA plots {#simple_link}

Using `TriplotGUI` package, first we perform dimension reduction, i.e. principal component analysis (PCA) on metabolomics variables.

```{r showcode_runcode_noshowoutput_2}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
reduced_Omics1 <- OmicsReduction(dataframe = Omics1,
                                   pcNum = 5,
                                   option = "PCA",
                                   loadingsName = TRUE)

```

You can view scree plot, score plot, loading plot and biplot at this stage.

```{r showcode_runcode_showoutput_6}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
#| out-width: "100%"
reduced_Omics1$scree_plot
reduced_Omics1$score_plot
reduced_Omics1$loading_plot
reduced_Omics1$scoreloading_plot
```


::: callout-note
Sometimes the following text will show up in your console and the figure cannot be directly run:

`libpng warning: Image width is zero in IHDR` 

`libpng error: Invalid IHDR data` 

`Warning message:`

`In dev.off(which) : agg could not write to the given file\`

Run `gc()` in your console to clear the memory. Then rerun the code again to view the figure.
::: 


We then build a TPObject based on the data reduction results. This object will be used to save information and facilitate the transfer of data through the various steps in TriplotGUI.

```{r showcode_runcode_showoutput_7}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.output: false
scores <- reduced_Omics1$object$scores
loadings <- reduced_Omics1$object$loadings
variance <- reduced_Omics1$object$variance
TPObject1 <- makeTPO(scores = scores,
                     loadings = loadings,
                     variance = variance)
```

## Step 2-3: Exposure correlations & Outcome associations

The correlations between principal components (PCs) and food items are calculated using Pearson correlations, adjusting for confounders. We investigate associations between PC scores and risk markers adjusting for confounders using linear regression, as all food variables are numeric.

The PC scores are saved in the TPObject, which can be directly used in the `exposureAssociation()` function to calculate correlation coefficients and p-values with exposures (food variables), while adjusting for confounders.

```{r showcode_runcode_noshowoutput_3}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.output: false
Correlations_object <- exposureAssociation(TPObject = TPObject1,
                                exposure = exposure1,
                                confounder = covariates1,
                                method = "pearson")

```

The correlation results are then added to the TPObject.

```{r showcode_runcode_showoutput_8}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.output: false

TPObject2 <- addExposure(TPObject = TPObject1,
                     corrEstimate = Correlations_object$cor_estimate,
                     corrPvalue = Correlations_object$cor_pvalue)
```

Similarly, we calculate risk estimates (beta coefficients from linear regression) and p-values using the PC scores saved in the TPObject and the outcome variables. This is done using the `outcomeAssociation()` function, which also adjusts for confounders.

```{r showcode_runcode_noshowoutput_4}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.output: false
Risks_object <- outcomeAssociation(TPObject = TPObject2,
                               outcome = outcome1,
                               confounder = covariates1)

```

The risk estimate results are then added to the TPObject.

```{r showcode_runcode_showoutput_9}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.output: false


TPObject3 <- addOutcome(TPObject = TPObject2, 
                     Risk = Risks_object)

```

## Step 4: Visualization of Triplot

Then we generate the Triplot. It's important to note that a Triplot can be generated from any TPObject.

```{r showcode_runcode_noshowoutput_5}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.output: false

TPO_plots3 <- TriplotGUI(TPObject3, 
                              riskOR = FALSE) #risks is shown as coeffcients, not odds ratio

```

Plot the triplot

```{r showcode_runcode_showoutput_10}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
#| out-width: "100%"
TPO_plots3$triplot

```

In the triplot, black arrows represent loadings of Omics variables, forming patterns in different components (axes). Blue circle points show exposure correlations with the components, while red square points indicate outcome associations with the components.

For interpretation, let’s focus on Principal Component 1 (PC1) and Principal Component 2 (PC2), using the exposures `"Refined grains"`, `"Red meat"`, and the outcome `"BMI"` as examples:

PC1: This component shows a positive association with BMI and is correlated with high intakes of red meat and refined grains, even after adjusting for age and sex. This suggests that the metabolite features dominating PC1 may provide valuable insights into how the intake of red meat and refined grains could influence BMI.

PC2: In contrast, PC2 exhibits a smaller association with BMI and a weak inverse correlation with red meat and refined grains. The metabolite features contributing significantly to PC2 may indicate a marginal beneficial effect of these dietary components, although this effect appears to be limited. This may also suggest that the features dominating PC2 may reflect metabolite patterns influenced by food, but not to a large degree associations with metabolic regulation in relation to health.

This interpretation highlights how different dietary exposures relate to metabolic outcomes, offering insights into potential mechanisms at play.

## Step 5: Triplot with mediation

Mediation analysis will be performed using the conventional “product” method on our selected exposures (`"Refined grains"`, `"Red meat"`), mediators (PC1 and PC2), and the outcome of interest (`"BMI"`), adjusting for age and sex in both the exposure-mediator and mediator-outcome relationships.

```{r showcode_runcode_noshowoutput_6}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.output: false

mediation_object3 <- 
  getMediationConventional (mediator = TPObject3$scores[,c(1:2),drop = FALSE], 
                             # Specfiying at least 2 components so that there can be a 2-dimensional plot
                             exposure = exposure1[,c("Refined_grains","Red_meat"),drop = FALSE],
                             outcome = outcome1[,"BMI",drop = FALSE],
                             confounderME = covariates1,
                             confounderOE = covariates1)

```

Examine the barplot for a clearer view of the direct, indirect, and total effects for each combination of PC, exposure, and outcome.

```{r showcode_runcode_noshowoutput_7}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.plot: true
mediation_plots3 <- mediationBarplot(mediationObject = mediation_object3,
                                         cex = 2,
                                         # size of the text
                                         by_row = "one_column")

```

```{r showcode_runcode_showoutput_11}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
#| out-width: "100%"
#| out-height: "200%"
mediation_plots3
```

::: callout-note
The barplot displays direct, indirect, and total effects for each exposure-mediator-outcome combination, providing a convenient tool to assess the direction and magnitude of mediation estimates.

-   Color coding indicates significance and direction: red represents significant positive effects (p\<0.05), blue represents significant negative effects (p\<0.05), and grey represents insignificant effects.
-   Significance levels are denoted by stars: one star for p\<0.05, two stars for p\<0.01, and three stars for p\<0.001.
:::

The mediation results are then added to the TPObject.

```{r showcode_runcode_showoutput_12}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true

TPObject4 <- addMediation(TPObject = TPObject3, 
                           mediationObject = mediation_object3)

```

Make the triplot with mediation.

```{r showcode_runcode_noshowoutput_8}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.plot: true

TPO_plots4 <- mediationTriplot(TPObject4,
                                     show = c("IE","TE")
                                     )

```

Show the mediation estimates only (indirect and total effect).

```{r showcode_runcode_showoutput_13}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
#| out-width: "100%"
TPO_plots4$mediations_plot

```

::: callout-note
In the triplot, indirect effects, which are specific to each mediator (such as PC1 or PC2), are depicted as dark green triangle points. Total effects, on the other hand, are shown as circles. It's important to note that while indirect effects are tied to particular mediators, total effects remain constant for specific exposure-outcome pairs.
:::

Plot the triplot with mediation.

```{r showcode_runcode_showoutput_14}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
#| out-width: "100%"
TPO_plots4$mediations_triplot

```

Based on the barplot and the triplot with mediation, we observed significant mediation effects through PC1 for the red_meat-BMI and refined_grain-BMI associations. This finding suggests that the metabolite features contributing to PC1 are likely mediating the pathway from red meat and refined grain intake to BMI changes. These results provide insight into potential metabolic mechanisms linking dietary patterns to body mass index.

## Comparative Visualization

Users can easily visualize the correlations, risk estimations, and mediation results stored in the TPObject using the `checkTPO()` function provided by TriplotGUI. This function generates heatmaps for each type of analysis, offering a comprehensive and intuitive way to examine the relationships between variables. Note that you could put any TPObjects generate along the steps for heatmap visualizations.

```{r showcode_runcode_noshowoutput_9}
#| eval: true
#| echo: true
#| output: false
#| classes: styled-output
#| fold.plot: true

checkTPObject4 <- checkTPO(TPObject4,
                                  size=7    ## customize the size of stars
                                  )

```

Show heatmap for correlation coefficients and p values between PCs and exposures:

```{r showcode_runcode_showoutput_15A}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
#| out-width: "100%"
checkTPObject4$corr_coefficients
```

Show heatmap for risk estimates (beta coefficients) and p values between PCs and outcomes:

```{r showcode_runcode_showoutput_15B}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
checkTPObject4$risk_coefficients
```

Show heatmap for mediation estimates and p values for indirect effect(IE), and total effect(TE), proportion mediated (PM) and adjusted proportion mediated (APM): See [Manual](workflow.qmd){target="_blank"} section for more details:

```{r showcode_runcode_showoutput_15C}
#| eval: true
#| echo: true
#| output: true
#| classes: styled-output
#| fold.plot: true
#| out-width: "100%"

checkTPObject4$med_coefficients
```

::: callout-note
-   Significance is indicated as follows. One star for p\<0.05; Two stars for p\<0.01; Three stars for p\<0.001.
-   Note that in the heatmap from `checkTPbject4$med_coefficients`, only the selected exposures, mediators and outcomes that we use to do mediation on will show up. The rows in the heatmaps are mediators and the column represents exposure-outcome pairs. For each exposure-outcome pair, 4 result are shown: *IE* (indirect effect), *TE* (total effect), *PM*(Proportion Mediated) and *APM*(Adjusted Proportion Mediated). Please see [Details section](https://yingxiaoyan.gitlab.io/triplotgui_tutorial/workflow.html#5.2){target="_blank"} for more information. The "BK" before the names of exposures-outcome pairs means that this mediation is using the Coventional Baron-Kenny "product" method.
:::

## Data Download

To save all your output, including data, results, and visualization output as an .rda file, you can use the `save()` function in R.

```{r showcode_noruncode_noshowoutput_1}
#| eval: false
#| echo: true
#| warning: false
#| error: true
#| classes: styled-output

save(exposure1,Omics1,outcome1,covariates1,
     reduced_Omics1,Correlations_object,Risks_object,
     mediation_object3,mediation_plots3,
     TPObject1,TPObject2,TPObject3,TPObject4,
     checkTPObject4,
     "Tutorial_simple_output.rda")
```
